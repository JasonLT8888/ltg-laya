let JsZip = require("../lib/jszip.min.js"); let path = require('path'); let fs = require('fs-extra'); let adapterUtil = require("./adapter-util.js"); let subpackageUtil = require("./subpackage-util.js"); let tinyPackUtil = require("./tinypack-util.js"); let info = {}; const MAIN_JS_NAME = "main.js"; const GAME_CONFIG_JSONS_NAME = "game.config.json"; JsZip.prototype.directory = function (srcPath, dirName) { let stat = fs.statSync(srcPath); if (!stat.isDirectory()) { Editor.error(srcPath + " is not a folder!"); return; } let list = fs.readdirSync(srcPath); list.forEach(function (name) { let zip = this.zip; let filePath = path.join(this.srcPath, name); let stat = fs.statSync(filePath); if (stat.isDirectory()) { zip.directory(filePath, name); } else if (stat.isFile()) { zip.file(name, fs.readFileSync(filePath)); } else { Editor.error(filePath + " was not added to zip!"); } }.bind({ srcPath: srcPath, zip: this.folder(dirName) })) }; JsZip.prototype.append = function (srcPath, relativePath) { let stat = fs.statSync(srcPath); if (!stat.isFile()) { Editor.error(srcPath + " is not a file!"); return; } this.file(relativePath, fs.readFileSync(srcPath)); }; module.exports = { async gatherInfo(event, options) { info.customConfig = Editor.Profile.load('project://cocos-runtime.json').getSelfData(); if (this.checkData(info, event, options) === false) { return false; } info.md5Cache = options.md5Cache; let customConfig = info.customConfig; info.isTinyPackage = customConfig.tinyPackageServer !== ''; info.projectPath = options.project; info.buildPath = options.dest; info.options = options; info.title = options.title; info.cpkName = options.title + '.cpk'; info.cpkPath = path.join(info.buildPath, info.cpkName); info.buildResults = options.buildResults; info.startScene = options.startScene; info.gameConfig = { "deviceOrientation": customConfig.deviceOrientation, "showStatusBar": customConfig.showStatusBar, "runtimeVersion": customConfig.runtimeVersion }; info.JsZip = JsZip; info.cpk = new JsZip(); await adapterUtil.gatherInfo(info); await subpackageUtil.gatherInfo(info); await tinyPackUtil.gatherInfo(info); }, checkData(info, event, options) { var validator = true; var errorText = ""; if (!validator) { event.reply(new Error(errorText)); return false; } if (fs.existsSync(path.join(options.dest, 'remote')) && info.customConfig.tinyPackageServer === '') { Editor.warn(Editor.T('cocos-runtime.had_set_remote_without_tiny_mode')); } return true; }, async organizeResources(event) { let buildPath = info.buildPath; var isValid = await adapterUtil.organizeResources(event); if (isValid === false) { return false; } await subpackageUtil.organizeResources(); fs.writeJSONSync(path.join(buildPath, GAME_CONFIG_JSONS_NAME), info.gameConfig); this.handleMainJS(); return true; }, handleMainJS() { let resPath = Editor.url('packages://cocos-runtime/res'); let mainJsPath = path.join(resPath, "main.js"); var fileMain = path.join(info.buildPath, MAIN_JS_NAME); fs.copySync(mainJsPath, fileMain); }, async pack() { let cpk = info.cpk; let cpkPath = info.cpkPath; let buildPath = info.buildPath; if (fs.existsSync(cpkPath)) { fs.unlinkSync(cpkPath); } await adapterUtil.pack(); await subpackageUtil.pack(); await tinyPackUtil.pack(); } };