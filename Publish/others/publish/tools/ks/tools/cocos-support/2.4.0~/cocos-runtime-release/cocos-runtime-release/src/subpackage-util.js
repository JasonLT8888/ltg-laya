let Hashes = require('../lib/hashes.min.js'); let path = require('path'); let fs = require('fs-extra'); let buildPath; let packagesPath; let title; let gameConfig; let cpk; let JsZip; let options; module.exports = { gatherInfo(info) { JsZip = info.JsZip; cpk = info.cpk; gameConfig = info.gameConfig; title = info.title; buildPath = info.buildPath; options = info.options; packagesPath = []; }, organizeResources() { let tempSubPackagesPath = path.join(buildPath, "_tempSubpackages"); fs.emptyDirSync(tempSubPackagesPath); let packages = gameConfig.subpackages = []; for (var i = 0, l = options.bundles.length; i < l; i++) { var bundle = options.bundles[i]; if (bundle.compressionType !== 'subpackage') { continue; } let name = bundle.name; let packagePath = bundle.scriptDest; if (packagesPath.includes(packagePath)) { break; } packagesPath.push(packagePath); let indexPath = path.join(bundle.scriptDest, 'index.js'); if (fs.existsSync(indexPath)) { fs.renameSync(indexPath, path.join(bundle.scriptDest, 'main.js')); } packages.push({ name: name, root: name + "/" }); let moveToPath = path.join(tempSubPackagesPath, name); fs.moveSync(packagePath, moveToPath); } fs.removeSync(path.join(buildPath, "subpackages")); for (let key in packages) { if (!packages.hasOwnProperty(key)) { continue; } let name = packages[key].name; let outputDir = path.join(buildPath, name); let originDir = path.join(tempSubPackagesPath, name); fs.moveSync(originDir, outputDir); } fs.removeSync(tempSubPackagesPath); }, pack() { } };