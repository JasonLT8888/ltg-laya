'use strict'; let profile = Editor.Profile.load('project://cocos-runtime.json'); let runtimeSetting = profile.getSelfData(); exports.template = `<ui-prop name="${Editor.T('cocos-runtime.pack_res_to_first_pack')}"><ui-checkbox v-value="runtimeSetting.packFirstScreenRes"></ui-checkbox></ui-prop><ui-prop name="${Editor.T('cocos-runtime.screen_orientation')}"><ui-select class="flex-1"v-value="runtimeSetting.deviceOrientation"><option value="portrait">${Editor.T('cocos-runtime.vertical_screen')}</option><option value="landscape">${Editor.T('cocos-runtime.horizontal_screen')}</option></ui-select></ui-prop><ui-prop name="${Editor.T('cocos-runtime.status_bar_display')}"auto-height><ui-checkbox v-value="runtimeSetting.showStatusBar"></ui-checkbox></ui-prop><ui-prop name="${Editor.T('cocos-runtime.use_native_renderer')}"v-show="false"><ui-checkbox v-value="project.nativeRenderer"></ui-checkbox></ui-prop><ui-prop name="${Editor.T('cocos-runtime.runtime_version')}"auto-height><ui-input class="flex-1"v-value="runtimeSetting.runtimeVersion"></ui-input></ui-prop><ui-prop name="${Editor.T('cocos-runtime.small_packet_path')}"auto-height><ui-input class="flex-1"v-value="runtimeSetting.tinyPackageServer"placeholder="${Editor.T('cocos-runtime.small_packet_path_hint')}"></ui-input></ui-prop><ui-prop name="${Editor.T('cocos-runtime.worker_path')}"v-show="false"auto-height><ui-input
class="flex-1"v-value="runtimeSetting.workerPath"placeholder="${Editor.T('cocos-runtime.worker_path_hint')}"></ui-input></ui-prop><ui-prop name="${Editor.T('cocos-runtime.separate_engine')}"v-show="false"auto-height><ui-checkbox v-value="runtimeSetting.separateEngineMode"></ui-checkbox></ui-prop>`; exports.name = 'cocos-runtime'; exports.data = function () { return { runtimeSetting, originEncryptJs: false, profile: null, }; }; exports.watch = { runtimeSetting: { handler(val) { Object.keys(this.runtimeSetting).forEach(key => { profile.set(key, this.runtimeSetting[key]); }); profile.save(); }, deep: true, } }; exports.created = function () { this.originEncryptJs = this.project.encryptJs; this.includeSDKBox = this.project.includeSDKBox; this.project.encryptJs = false; this.project.includeSDKBox = false; }; exports.directives = {}; exports.beforeDestroy = function () { this.project.encryptJs = this.originEncryptJs; this.project.includeSDKBox = this.includeSDKBox; }; exports.methods = {};